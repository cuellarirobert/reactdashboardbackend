[{
  "Question": "How to fetch locations with specific IDs and list them?",
  "Answer": "Retrieve locations using custom IDs from MapsIndoors and add them to an HTML list element.",
  "Context": {
    "Code": "mapsIndoors.services.LocationsService.getLocationsByExternalId(['id1', 'id2']).then(locations => {\n  locations.forEach(loc => {\n    const item = document.createElement('li');\n    item.textContent = loc.properties.name;\n    document.getElementById('location-list').appendChild(item);\n  });\n});"
  }
},

,{
  "Question": "How do I highlight specific locations on a map?",
  "Answer": "Use MapsIndoors to fetch and then highlight locations by their custom external IDs on the map.",
  "Context": {
    "Code": "['id1', 'id2'].forEach(id => {\n  mapsIndoors.services.LocationsService.getLocationsByExternalId([id]).then(locs => {\n    if (locs.length) mapsIndoorsInstance.setHighlight(locs[0].id, true);\n  });\n});"
  }
},
{
  "Question": "How to search for MapsIndoors locations by name?",
  "Answer": "Use the 'getLocations' service with the query parameter to search for locations by name.",
  "Context": {
    "Code": "mapsIndoors.services.LocationsService.getLocations({ q: 'Name' }).then(locations => {\n  // locations with matching names\n});"
  }
},
{
  "Question": "How to filter MapsIndoors locations by category?",
  "Answer": "Invoke 'getLocations' with a categories filter to retrieve locations that match certain categories.",
  "Context": {
    "Code": "mapsIndoors.services.LocationsService.getLocations({ categories: ['Category1', 'Category2'] }).then(locations => {\n  // locations in specified categories\n});"
  }
},
{
  "Question": "How do I find MapsIndoors locations within a specific venue?",
  "Answer": "Use the 'getLocations' service and filter by 'venue' to find locations within a particular venue.",
  "Context": {
    "Code": "mapsIndoors.services.LocationsService.getLocations({ venue: 'VenueID' }).then(locations => {\n  // locations in 'VenueID'\n});"
  }
},
{
  "Question": "How to sort MapsIndoors locations by a property in descending order?",
  "Answer": "Use 'getLocations' with 'orderBy' and 'sortOrder' to sort locations by a specific property.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getLocations({ orderBy: 'Property', sortOrder: 'DESC' }).then(locations => {\n  // Sorted locations\n});"
  }
},
{
  "Question": "How to fetch a MapsIndoors location based on a UI card click?",
  "Answer": "Retrieve a location's details using its ID, which is obtained from a UI card click event.",
  "Context": {
    "Code": "const locationId = 'LocationID'; // ID from UI card click\nmapsindoors.services.LocationsService.getLocation(locationId).then(location => {\n  // Location data\n});"
  }
},
{
  "Question": "How do I obtain details of a location selected from a list?",
  "Answer": "Fetch the location details by passing the selected location's ID to the 'getLocation' method.",
  "Context": {
    "Code": "const locationId = 'ListSelectionID';\nmapsindoors.services.LocationsService.getLocation(locationId).then(location => {\n  // Process location data\n});"
  }
},
{
  "Question": "How to retrieve location details after user interaction?",
  "Answer": "Acquire location details using the 'getLocation' method with an ID gained from user interaction.",
  "Context": {
    "Code": "const locationId = 'UserInteractionID';\nmapsindoors.services.LocationsService.getLocation(locationId).then(location => {\n  // Process location data\n});"
  }
},
{
  "Question": "How do I access a custom property in MapsIndoors?",
  "Answer": "Retrieve a custom property's data using `getFieldForKey` with the property key.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getFieldForKey('YourKey') â†’ Field",
    "Note": "Replace 'YourKey' with the actual key name of the custom property you want to access."
  }
},
{
  "Question": "How to get the value of the 'wikipage' custom property?",
  "Answer": "Use `getFieldForKey` passing 'wikipage' to obtain its value.",
  "Context": {
    "Code": "const wikipageValue = mapsindoors.services.LocationsService.getFieldForKey('wikipage').value;\nconsole.log(wikipageValue);"
  }
},
{
  "Question": "How to retrieve the value of a 'customField' property?",
  "Answer": "Fetch the 'customField' value with `getFieldForKey`.",
  "Context": {
    "Code": "const customFieldValue = mapsindoors.services.LocationsService.getFieldForKey('customField').value;\nconsole.log(customFieldValue);"
  }
},
{
  "Question": "How do I use a custom field in MapsIndoors?",
  "Answer": "Construct content strings using the custom field values from a location object.",
  "Context": {
    "Code": "const infoWindowContent = `<img src=\"${location.properties.imageURL}\" alt=\"Location Image\" />\n<h2><a href=\"${location.properties.fields.wikipage.value}\" target=\"_blank\">${location.properties.name}</a></h2>`;"
  }
},
{
  "Question": "How do I include the MapsIndoors Web SDK and Mapbox dependencies in my project?",
  "Answer": "Add the MapsIndoors and Mapbox script and stylesheet links to your HTML. Use your MapsIndoors API key and Mapbox access token where required.",
  "Context": {
    "IncludeSDK": {
      "Code": "<script src='https://app.mapsindoors.com/mapsindoors/js/sdk/mapsindoors-x.x.x.js.gz?apikey=YOUR_API_KEY'></script>"
    },
    "IncludeMapbox": {
      "Code": "<script src='https://api.mapbox.com/mapbox-gl-js/vx.x.x/mapbox-gl.js'></script>\n<link href='https://api.mapbox.com/mapbox-gl-js/vx.x.x/mapbox-gl.css' rel='stylesheet' />",
      "Note": "Replace 'x.x.x' with the version numbers and 'YOUR_API_KEY' with your actual API key."
    }
  }
},
{
  "Question": "How to create a MapsIndoors map with Mapbox and configure its options?",
  "Answer": "Initialize a MapboxView with your Mapbox access token and other map options, then create a MapsIndoors instance with this view.",
  "Context": {
    "Code": "const mapViewOptions = { accessToken: 'YOUR_TOKEN', element: 'mapElement', center: { lat: 38.8977, lng: -77.0365 }, zoom: 17, maxZoom: 22 };\nconst mapView = new mapsindoors.mapView.MapboxView(mapViewOptions);\nnew mapsindoors.MapsIndoors({ mapView });"
  }
},
{
  "Question": "How do I style map elements in MapsIndoors with Mapbox?",
  "Answer": "Alter map element styles by accessing the Mapbox object via MapView and using 'setPaintProperty' for layer styling.",
  "Context": {
    "Code": "mapViewInstance.getMap().setPaintProperty('LAYER_ID', 'PROPERTY_NAME', 'VALUE');"
  }
},
{
  "Question": "How to get the map's current bearing using MapsIndoors?",
  "Answer": "Retrieve the map's bearing with 'getBearing()' on the MapView instance.",
  "Context": {
    "Code": "const bearing = mapViewInstance.getBearing();"
  }
},
{
  "Question": "How do I find the map's pitch with MapsIndoors?",
  "Answer": "Use 'getPitch()' on the MapView instance to get the current pitch of the map.",
  "Context": {
    "Code": "const pitch = mapViewInstance.getPitch();"
  }
},
{
  "Question": "How to adjust the map's bearing using MapView?",
  "Answer": "Rotate the map with the 'rotate' method on MapView, passing in the angle in degrees.",
  "Context": {
    "Code": "mapViewInstance.rotate(desiredAngle);"
  }
},
{
  "Question": "How do I change the map's pitch with MapView?",
  "Answer": "Modify the map's tilt using the 'tilt' method on MapView, inputting the pitch in degrees.",
  "Context": {
    "Code": "mapViewInstance.tilt(desiredPitch);"
  }
},
{
  "Question": "How can I get all key-value pairs for the map from MapView?",
  "Answer": "Retrieve all map-related values using the 'getValues' method on MapView.",
  "Context": {
    "Code": "const mapValues = mapViewInstance.getValues();"
  }
},
{
  "Question": "How to use Mapbox features with MapsIndoors MapView?",
  "Answer": "Access the underlying Mapbox map with 'getMap' from MapView for Mapbox functionality.",
  "Context": {
    "Code": "const mapboxMap = mapViewInstance.getMap();",
    "Note": "Ensure compatibility with MapsIndoors when using Mapbox methods directly."
  }
},
{
  "Question": "How to initialize a MapsIndoors instance in JavaScript?",
  "Answer": "Instantiate MapsIndoors by calling the constructor with the necessary options.",
  "Context": {
    "Code": "const mapsIndoorsInstance = new mapsindoors.MapsIndoors({ mapView: mapViewInstance });"
  }
},
{
  "Question": "What does 'mapsIndoorsInstance' signify in MapsIndoors?",
  "Answer": "'mapsIndoorsInstance' is the primary interface to interact with the MapsIndoors SDK.",
  "Context": {
    "Note": "This instance controls map interactions, layers, and other SDK features."
  }
},
{
  "Question": "How do you change floors in MapsIndoors?",
  "Answer": "Use the 'setFloor' method on 'mapsIndoorsInstance' to switch floors.",
  "Context": {
    "Code": "mapsIndoorsInstance.setFloor(floorNumber);",
    "Note": "Replace 'floorNumber' with the desired floor index."
  }
},
{
  "Question": "What configurations does 'setLabelOptions' adjust in MapsIndoors?",
  "Answer": "Adjust label display settings like alignment, color, and font with 'setLabelOptions'.",
  "Context": {
    "Code": "mapsIndoorsInstance.setLabelOptions({ color: 'red', fontSize: '14px' });"
  }
},
{
  "Question": "Can you show how to customize label options in MapsIndoors?",
  "Answer": "Customize labels using 'setLabelOptions' to set properties like color and font size.",
  "Context": {
    "Code": "mapsIndoorsInstance.setLabelOptions({ alignment: 'center', color: '#FF0000', fontSize: '12px', fontStyle: 'italic' });"
  }
},
{
  "Question": "What is a 'mapsIndoorsInstance' and how is it instantiated?",
  "Answer": "'mapsIndoorsInstance' is the primary controller of MapsIndoors, initialized with configuration options.",
  "Context": {
    "Code": "const mapsIndoorsInstance = new mapsindoors.MapsIndoors({ mapView: mapViewInstance });"
  }
},
{
  "Question": "How to switch floors in MapsIndoors?",
  "Answer": "Use 'mapsIndoorsInstance.setFloor()' with a floor index to change the displayed floor.",
  "Context": {
    "Code": "mapsIndoorsInstance.setFloor(floorIndex);"
  }
},
{
  "Question": "What label options can be adjusted with 'setLabelOptions' in MapsIndoors?",
  "Answer": "Modify label characteristics like alignment, color, and font using 'setLabelOptions'.",
  "Context": {
    "Code": "const labelOptions = { align: 'left', color: '#FF5733', fontFamily: 'Arial', fontSize: '14px', fontWeight: 600 };\nmapsIndoorsInstance.setLabelOptions(labelOptions);"
  }
},
{
  "Question": "How do I customize label options with MapsIndoors?",
  "Answer": "Change label parameters such as alignment, color, and font using 'setLabelOptions'.",
  "Context": {
    "Code": "const customLabelOptions = { align: 'center', color: '#007BFF', fontFamily: 'Arial', fontSize: '16px', fontWeight: 700 };\nmapsIndoorsInstance.setLabelOptions(customLabelOptions);"
  }
},
{
  "Question": "How to modify runtime icons for MapsIndoors locations?",
  "Answer": "Apply a new display rule with 'mapsIndoorsInstance.setDisplayRule' to update icons for locations.",
  "Context": {
    "Code": "const locationIds = ['locationId1', 'locationId2'];\nconst customDisplayRule = { icon: 'custom_icon.png' };\nmapsIndoorsInstance.setDisplayRule(locationIds, customDisplayRule);"
  }
},
{
  "Question": "What are MapsIndoors locations and their capabilities?",
  "Answer": "MapsIndoors locations represent points of interest and can be manipulated using SDK methods like 'setDisplayRule' for customization.",
  "Context": {
    "Note": "Locations have properties like ID, type, geometry, and can be customized in display and functionality."
  }
},
{
  "Question": "How to resize location icons on hover in MapsIndoors?",
  "Answer": "Set 'iconScale' in the DisplayRule when a user hovers over a location to adjust icon size.",
  "Context": {
    "Code": "const hoverDisplayRule = { iconScale: 1.2 };\nmapsIndoorsInstance.setDisplayRule(locationId, hoverDisplayRule);"
  }
},
{
  "Question": "How to make location labels visible at certain zoom levels in MapsIndoors?",
  "Answer": "Use 'labelZoomFrom' and 'labelZoomTo' in DisplayRule to show labels only within specific zoom levels.",
  "Context": {
    "Code": "const labelDisplayRule = { labelZoomFrom: 16, labelZoomTo: 18 };\nmapsIndoorsInstance.setDisplayRule(locationId, labelDisplayRule);"
  }
},
{
  "Question": "How to hide location polygons at certain zoom levels in MapsIndoors?",
  "Answer": "Configure 'polygonVisible', 'polygonZoomFrom', and 'polygonZoomTo' in DisplayRule to control polygon visibility based on zoom level.",
  "Context": {
    "Code": "const polygonDisplayRule = { polygonVisible: false, polygonZoomFrom: 16, polygonZoomTo: 18 };\nmapsIndoorsInstance.setDisplayRule('typeId', polygonDisplayRule);"
  }
},
{
  "Question": "What properties are modifiable in a MapsIndoors display rule?",
  "Answer": "A display rule can modify properties like visibility, icon details, label settings, polygon appearance, and 3D or 2D models.",
  "Context": {
    "Code": "const displayRule = { visible: true, icon: 'icon_url.png', labelVisible: true, polygon: { visible: false }, model3D: { visible: true } };\nmapsIndoorsInstance.setDisplayRule(locationId, displayRule);"
  }
},
{
    "Question": "How can I retrieve the location details by external IDs like 'ABC123', 'ABC124,' and 'ABC125' using MapsIndoors?",
    "Answer": "mapsIndoorsInstance.getLocationsByExternalId(['ABC123', 'ABC124', 'ABC125'])\n  .then(locations => {\n    // Handle the retrieved locations here\n  });",
    "Context": "ASYNC STATIC\ngetLocationsByExternalId(externalId) â†’ {Promise.<Array.<Location>>}\nGet locations by externalId\n\nParameters:\n- externalId (string | or Array.<string>): The externalId of the location or an array of external IDs.\n\nReturns:\nType: Promise.<Array.<Location>>\n\nThis function retrieves location information based on external IDs. It returns a Promise that resolves to an array of Location objects. You can use this function to fetch location data by providing one or more external IDs."
  },
  {
    "Question": "How do I get the location object with MapsIndoors location ID '5666f75bc1843a08b81bef72'?",
    "Answer": "mapsindoors.services.LocationsService.getLocation('5666f75bc1843a08b81bef72').then(location => { ... });",
    "Context": "ASYNC STATIC\ngetLocation(id) â†’ {Promise.<Location>}\nGet a location by its id\n\nParameters:\n- id (string): The ID of the location you want to retrieve.\n\nReturns:\nType: Promise.<Location>\n\nExample:\n\n```javascript\nmapsindoors.services.LocationsService.getLocation('5666f75bc1843a08b81bef72').then(location => { ... });\n```\n\nThis function allows you to fetch the location object by providing the ID of the MapsIndoors location. It returns a Promise that resolves to the location object, which you can then work with in your code."
  },
  {
    "Question": "How do I get all MapsIndoors locations near MapsIndoors location with ID '5666f75bc1843a08b81bef72' that are of location type 'Meetingroom' on floor index 50?",
    "Answer": "mapsindoors.services.LocationsService.getLocations({ near: '5666f75bc1843a08b81bef72', floor: 50, types: ['Meetingroom'] });",
    "Context": "ASYNC STATIC\ngetLocations(options) â†’ {Promise.<Array.<Location>>}\nGet a list of locations that meet specified criteria.\n\nParameters:\n- options (Object): An object specifying the criteria for location retrieval, which can include:\n  - near (string): The ID of the reference location to search nearby.\n  - floor (number): The floor index on which to search for locations.\n  - types (Array<string>): An array of location types to filter the results.\n\nReturns:\nType: Promise.<Array.<Location>>\n\nExample:\n\n```javascript\nmapsindoors.services.LocationsService.getLocations({ near: '5666f75bc1843a08b81bef72', floor: 50, types: ['Meetingroom'] });\n```\n\nThis function allows you to retrieve a list of locations that match the specified criteria, such as being near a particular location, on a specific floor, and of a specific type, in this case, 'Meetingroom'. The function returns a Promise that resolves to an array of Location objects that meet the criteria."
  },
  {
    "Question": "How do I filter for MapsIndoors locations based on their assigned categories in MapsIndoors?",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <script src=\"https://app.mapsindoors.com/mapsindoors/js/sdk/4.25.0/mapsindoors-4.25.0.js.gz?apikey=demo\"></script>\n    <title>2. Categories</title>\n</head>\n\n<body>\n    <select id=\"select_categories\" multiple></select>\n    <div id=\"results\"></div>\n    <script>\n        const results = document.getElementById('results');\n        const select_categories = document.getElementById('select_categories');\n\n        select_categories.addEventListener('change', search);\n\n        mapsindoors.services.SolutionsService.getCategories()\n            .then(categories => {\n                select_categories.innerHTML = categories.map(category => `<option value=\"${category.key}\">${category.value}</option>`).join('');\n                select_categories.size = categories.length;\n            });\n\n        function search() {\n            const categories = Array.from(select_categories.selectedOptions).map(option => option.value);\n            console.log(categories);\n            if (categories.length > 0) {\n                mapsindoors.services.LocationsService.getLocations({ categories: categories })\n                    .then(locations => locations.filter(location => location.properties.name > ''))\n                    .then(locations => {\n                        results.innerHTML = locations.length > 0 ? `<ul>${locations.map(location => `<li>${location.properties.name}</li>`).join('')}</ul>`: 'No result!';\n                    })\n            } else {\n                results.innerHTML = '';\n            }\n        }\n\n        function groupByCategory(locations) {\n            return locations.reduce((categories, location) => {\n                Object.values(location.properties.categories).forEach(category => {\n                    if (categories.has(category)) {\n                        categories.get(category).push(location);\n                    } else {\n                        categories.set(category, [location]);\n                    }\n                });\n                return categories;\n            }, new Map())\n        }\n    </script>\n</body>\n\n</html>",
    "Context": "ASYNC STATIC\ngetLocations(argsopt) â†’ {Promise.<Array.<Location>>}\nSearch for locations.\n\nParameters:\n- categories (Array.<string>): An optional parameter that allows you to filter locations based on assigned categories. You can provide a list of category names as an array, e.g., ['meeting_room', 'office', ...]. A location can belong to multiple categories.\n\nThis HTML script demonstrates how to filter MapsIndoors locations based on selected categories. It utilizes the MapsIndoors JavaScript SDK to retrieve categories and filter locations based on the selected categories. The selected categories are obtained from a dropdown menu, and locations matching the selected categories are displayed in a list.\n\nYou can adapt and integrate this script into your web application to filter MapsIndoors locations by categories."
  },
  {
    "Question": "How do I get all bathrooms within the venue called City Campus?",
    "Answer": "mapsindoors.services.LocationsService.getLocations({q: 'S102', venue: \"CITY_CAMPUS\", fields: \"name,aliases\"}).then(locations => { ... });",
    "Context": "Context:\nq (string) - An optional parameter that allows you to use a text query to search for one or more locations.\nfields (string) - An optional parameter that specifies the fields to search in when using the search string parameter 'q'. By default, it includes \"name,description,aliases,categories\".\nvenue (string) - An optional parameter that limits the search for locations to a specific venue, identified by its ID or name."
  },
  {
    "Question": "How do I show a MapsIndoors map on my website?",
    "Answer": "<!-- index.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>MapsIndoors</title>\n  <script src=\"https://app.mapsindoors.com/mapsindoors/js/sdk/4.25.0/mapsindoors-4.25.0.js.gz?apikey=demo\"></script>\n  <script src='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js'></script>\n  <link href='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css' rel='stylesheet' />\n</head>\n<body>\n<div id=\"map\" style=\"width: 600px; height: 600px;\"></div>\n<script type=\"text/javascript\">\n\nconst mapViewOptions = {\n    accessToken: 'YOUR_MAPBOX_TOKEN',\n    element: document.getElementById('map'),\n    center: { lat: 38.8974905, lng: -77.0362723 }, // The White House\n    zoom: 19,\n    maxZoom: 22,\n};\nconst mapViewInstance = new mapsindoors.mapView.MapboxView(mapViewOptions);\nconst mapsIndoorsInstance = new mapsindoors.MapsIndoors({\n    mapView: mapViewInstance,\n});\n</script>\n</body>\n</html>",
    "Context": "Context:\n\n- `MapboxView` is the MapsIndoors MapView for MapBox, and you can pass Mapbox parameters to it.\n- `element` is the HTML element in which the map will be rendered.\n- `accessToken` is the Mapbox access token required for map rendering.\n- `center` specifies the initial geographical centerpoint of the map.\n- `zoom` sets the initial zoom level of the map.\n- `maxZoom` defines the maximum zoom level of the map.\n\n- `MapsIndoors` is a class that creates a new instance of MapsIndoors. You can provide options including `mapView` (an instance of a MapView), `venue` (the initial venue), `buildingOutlineOptions`, and `labelOptions`."
  },
  {
    "Question": "What are the Namespaces in the MapsIndoors Web SDK?",
    "Answer": "The MapsIndoors Web SDK has the following Namespaces:\n- `mapsindoors`\n- `directions`\n- `mapView`\n- `services`",
    "Context": "Namespaces are initialized when the script tag loads."
  },
  {
    "Question": "What are the Classes in the MapsIndoors Web SDK?",
    "Answer": "The MapsIndoors Web SDK includes several Classes, which need to be instantiated at runtime by the developer. Some of these classes are:\n- `BadgeRenderer`\n- `BookingAuthenticationConfig`\n- `DirectionsRenderer`\n- `FloorSelector`\n- `GoogleMapsProvider`\n- `GoogleMapsView`\n- `KVOObject`\n- `LiveDataInfo`\n- `LiveDataManager`\n- `Location`\n- `Mapbox2DLayer`\n- `MapboxProvider`\n- `MapboxView`\n- `MapsIndoors`\n- `MPBooking`\n- `PositionControl`\n- `Settings3D`\n- `SolutionConfig`\n- `UserRole`",
    "Context": "Classes need to be instantiated at runtime by the developer."
  },
  {
    "Question": "What are the Interfaces in the MapsIndoors Web SDK?",
    "Answer": "Interfaces in the MapsIndoors Web SDK describe the key-value pairs for different objects. Some of the Interfaces include:\n- `AppConfig`\n- `Building`\n- `BuildingOutlineOptions`\n- `Category`\n- `DirectionsRendererOptions`\n- `DirectionsRequest`\n- `DirectionsResult`\n- `DisplayRule`\n- `DistanceMatrixResult`\n- `EntryPoint`\n- `Field`\n- `LabelOptions`\n- `LatLngLiteral`\n- `Leg`\n- `LiveUpdate`\n- `MapsIndoorsOptions`\n- `MapStyle`\n- `Padding`\n- `PositionControlOptions`\n- `ReverseGeoCodeResult`\n- `Route`\n- `Solution`\n- `Step`\n- `StepContext`\n- `Type`\n- `Venue`",
    "Context": "Interfaces provide a structured definition of objects within MapsIndoors."
  },
  {
    "Question": "What Services are available in the MapsIndoors Web SDK?",
    "Answer": "The MapsIndoors Web SDK offers various Services, and they do not need to be initialized separately as they are all methods of the already initialized `mapsindoors` namespace. Some of the Service classes include:\n- `AppConfigService`\n- `BookingService`\n- `DirectionsService`\n- `DistanceMatrixService`\n- `GeoCodeService`\n- `LocationsService`\n- `ShareService`\n- `SolutionsService`\n- `VenuesService`",
    "Context": "Services are accessed through the `services` namespace and provide functionality like routing, geocoding, and venue management."
  },
  {
   "Question": "How can I retrieve a list of all categories associated with the current solution using the MapsIndoors Web SDK?",
   "Answer": "You can get a list of all categories associated with the current solution by calling the `getCategories` method of the `SolutionsService` class. Here's an example of how to use it:\n\n```javascript\nmapsindoors.services.SolutionsService.getCategories().then(categories => { /* Handle the list of categories here */ });\n```",
   "Context": "This method allows you to fetch the categories that are available within your current solution, which can be useful for categorizing different aspects of your MapsIndoors data."
 },
 {
   "Question": "How do I obtain detailed information about the current solution in the MapsIndoors Web SDK?",
   "Answer": "To get detailed information about the current solution, you can use the `getSolution` method provided by the `SolutionsService` class. Here's an example of how to call it:\n\n```javascript\nmapsindoors.services.SolutionsService.getSolution().then(solution => { /* Handle the solution details here */ });\n```",
   "Context": "This method is useful for retrieving comprehensive information about the currently loaded solution, including details like venue, building, and configuration settings."
 },
 {
   "Question": "How can I retrieve a list of available user roles associated with the current solution in the MapsIndoors Web SDK?",
   "Answer": "You can obtain a list of available user roles associated with the current solution by using the `getUserRoles` method from the `SolutionsService` class. Here's an example of how to do it:\n\n```javascript\nmapsindoors.services.SolutionsService.getUserRoles().then(userRoles => { /* Handle the user roles list here */ });\n```",
   "Context": "This method enables you to fetch the available user roles within your current solution, which can be valuable for role-based access control and user management in your MapsIndoors application. User roles allow you to define Locations and Routes based on specific roles, providing a more tailored experience for different user groups."
 },
 {
   "Question": "How can I populate a dropdown menu with a list of buildings for a selected venue in the MapsIndoors Web SDK?",
   "Answer": "To populate a dropdown menu with a list of buildings for a selected venue, you can use the `getBuildings` method from the `VenuesService` class to retrieve the buildings. Once you have the buildings, you can iterate through them and create dropdown options to represent each building. Here's an example:\n\n```javascript\nmapsindoors.services.VenuesService.getBuildings(venueId).then((buildings) => { ... });\n```",
   "Context": "This method allows you to dynamically populate a dropdown menu with buildings specific to the selected venue, which can be helpful for users to choose a building and access location-related information or services."
 },
 {
   "Question": "How can I populate a dropdown menu with a list of venues in the MapsIndoors Web SDK?",
   "Answer": "To populate a dropdown menu with a list of venues, you can use the `getVenues` method from the `VenuesService` class to retrieve the venues. Once you have the venues, you can populate the dropdown with the venue options. Here's an example:\n\n```javascript\nmapsindoors.services.VenuesService.getVenues().then((venues) => { ... });\n```",
   "Context": "This method enables you to provide users with a dropdown menu containing a list of venues available in your MapsIndoors solution, making it easy for them to select a venue and navigate to specific locations within it."
 },
 {
   "Question": "How can I listen to the 'building_changed' event in MapsIndoors?",
   "Answer": "You can listen to the 'building_changed' event by calling 'mapsIndoors.addListener('building_changed', (building) => {...});'. This event fires when the building focus changes, either by map movement or by calling 'mapsIndoors.fitBuilding(building)'.",
   "Context": "This event is useful for detecting changes in the focused building, which can be important for dynamic content updates or user interactions based on the building context."
 },
 {
   "Question": "What is the 'building_outline_changed' event in MapsIndoors used for?",
   "Answer": "The 'building_outline_changed' event is used to detect when the style for the building outline has changed in MapsIndoors.",
   "Context": "This event is handy when you need to respond to changes in the visual representation of building outlines, which may be triggered by style adjustments or other factors."
 },
 {
   "Question": "How do you listen to when a user clicks on the map with a 'click' event in MapsIndoors?",
   "Answer": "To listen to the 'click' event, you can use 'mapsIndoors.addListener('click', (location) => {...});'. This event is triggered when a location on the map is clicked.",
   "Context": "The 'click' event allows you to capture user interactions with map locations, making it essential for implementing custom click behavior, like the beginning of a flow which results in showing a Mapbox popup."
 },
 {
   "Question": "What is the purpose of the 'floor_changed' event in MapsIndoors?",
   "Answer": "The 'floor_changed' event is used to detect when the floor index changes. You can listen to it using 'mapsIndoors.addListener('floor_changed', (floorIndex) => {...});'. The floor index can change through 'mapsIndoors.setFloor(index)' or interaction with the FloorSelector.",
   "Context": "This event is crucial for maintaining awareness of floor level changes and enables you to adapt the UI or data displayed on the map accordingly."
 },
 {
   "Question": "How do you listen to the 'label_options_changed' event in MapsIndoors?",
   "Answer": "To listen to the 'label_options_changed' event, you can use 'mapsIndoors.addListener('label_options_changed', () => {...});'. This event is triggered when the style for labels changes.",
   "Context": "This event is relevant for tracking changes in label styling, which can be essential for maintaining consistent and appealing label presentations."
 },
{
  "Question": "How is the 'mouseenter' event used in MapsIndoors?",
  "Answer": "The 'mouseenter' event in MapsIndoors is triggered when the cursor hovers over a location. To handle this event, you can set up a listener with 'mapsIndoorsInstance.addListener('mouseenter', yourLocationHandlingFunction);', where 'yourLocationHandlingFunction' is a function defined to execute your desired logic.",
  "Context": "This event is useful for interactive features, such as showing details about a location or changing the style to highlight it, enhancing the user experience by providing context-sensitive interactions."
},
{
  "Question": "How do I implement a hover effect on a location in MapsIndoors?",
  "Answer": "To create a hover effect, listen for 'mouseenter' events on the MapsIndoors instance. Implement it using 'mapsIndoors.addListener('mouseenter', (location) => { // Add hover effect logic here });'.",
  "Context": "The 'mouseenter' event is triggered when a cursor enters a location's bounds. Use this to apply visual effects or display information, enhancing interactivity."
},
{
  "Question": "How do I detect when the cursor leaves a location's bounds in MapsIndoors?",
  "Answer": "Detect cursor exit by listening for 'mouseleave' events. Use 'mapsIndoors.addListener('mouseleave', (location) => { // Logic for when the cursor leaves });'.",
  "Context": "The 'mouseleave' event occurs when the cursor leaves a location's bounds. It's useful for removing hover effects or hiding information previously displayed on 'mouseenter'."
},
{
  "Question": "How does the 'ready' event function in MapsIndoors?",
  "Answer": "The 'ready' event confirms MapsIndoors initialization. Attach a listener with 'mapsIndoors.addListener('ready', callbackFunction);' to execute code after the SDK is ready.",
  "Context": "Use this event to safely start application logic that depends on the MapsIndoors SDK."
},
 {
   "Question": "How can you detect when display rules or locations change and those changes are reflected on the map in MapsIndoors?",
   "Answer": "You can listen to the 'redraw' event with 'mapsIndoors.addListener('redraw', () => {...});'. This event fires when a display rule or location changes, and those changes are reflected on the map.",
   "Context": "The 'redraw' event is beneficial for developers to respond to dynamic map updates caused by changes to display rules"
 },
 {
   "Question": "What does the 'zoom_changed' event in MapsIndoors signify?",
   "Answer": "The 'zoom_changed' event signifies a change in map zoom level. You can listen to it using 'mapsIndoors.addListener('zoom_changed', (zoomLevel) => {...});'. It provides a normalized MapsIndoors zoom level, which is recommended for evaluating DisplayRules due to differences in zoom levels across different map providers.",
   "Context": "This event is crucial for tracking changes in zoom level, which can affect the presentation and visibility of map features. It provides a normalized zoom level for consistency across different map providers."
 },
 {
   "Question": "How can I change the icon or color of a location when a user clicks on it?",
   "Answer": "You can change the icon or color of a location when a user clicks on it by listening to the 'click' event and dynamically updating the display rule for that location. Here's the code example: mapsIndoorsInstance.addListener('click', (location) => { const newDisplayRule = { visible: true, polygonVisible: true, polygonFillColor: \"#FFF122\", icon: \"https://app.mapsindoors.com/mapsindoors/cms/assets/icons/misc/custom-marker.png\", iconVisible: true, iconScale: 1.5 }; mapsIndoorsInstance.setDisplayRule(location.id, newDisplayRule); });",
   "Context": "In this code, we listen for the 'click' event and create a new display rule to update the location's visibility, polygon, polygon fill color, icon, and more. You can customize these properties to achieve the desired appearance changes."
 },
 {
   "Question": "How can I create custom selection in MapsIndoors?",
   "Answer": "You can create custom selection in MapsIndoors by using display rules to adjust the appearance of location results programmatically. Here's an example of how to set locations, especially polygons, to red and reset the display rule back to their original settings using setDisplayRule(id, null):\n\n```javascript\nlet previousLocationIds = []; // Keep track of previously selected locations\n\n// Custom selection function\nconst selectLocations = (locationIds, rule) => {\n    // Clear display rules of previously selected locations\n    if(previousLocationIds.length > 0) {\n        clearSelection(previousLocationIds);\n    }\n\n    // Apply the display rule to all the locations\n    locationIds.forEach(id => {\n        mapsIndoorsInstance.setDisplayRule(id, rule);\n    });\n\n    // Update the list of previously selected locations\n    previousLocationIds = locationIds;\n};\n\nconst clearSelection = (locationIds) => {\n    // Reset the display rule of all the locations\n    locationIds.forEach(id => {\n        mapsIndoorsInstance.setDisplayRule(id, null);\n    });\n};\n\nconst rule = { \n    visible: true,\n    polygonVisible: true,\n    polygonFillColor: \"#FF0000\",\n    polygonFillOpacity: 1,\n    iconSize: \n    {\n        width: 30,\n        height: 30\n    },\n    labelVisible: true,\n};\n```\n",
   "Context": "In this code example, you can create custom selection by defining a selection function that applies a display rule to specified location IDs. The code allows you to set the locations, particularly polygons, to a red color and provides a way to reset the display rule for those locations. This custom selection method enables you to adjust the appearance of location results according to your specific requirements. This will impact what the visibility looks like if polygonVisibility is set to true in the display rule."
 },
 {
   "Question": "How can I hide all other content on the map except what I'd like to filter?",
   "Answer": "Hiding all other content on the map, except what you'd like to filter, is primarily relevant when working with Raster tiles. However, keep in mind that hiding all other content may result in very limited visibility on the map for users. To achieve this, you can use the `mapsIndoorsInstance.filter(locationIds)` method after performing a search. The `filter` parameter should be an array of location IDs to filter the map by. You can pass `null` as the filter to clear the filter.",
   "Context": "The provided code example demonstrates how to filter locations based on category and provides a way to control the visibility of specific location content on the map. It's important to consider the implications of hiding all other content, as it may result in a limited map view for users."
 },
 {
  "Question": "What are the properties of a MapsIndoors location object?",
  "Answer": "A MapsIndoors location object is a GeoJSON Feature with properties that detail its characteristics and attributes. Here's a breakdown of its properties:",
  "Context": {
    "id": "Unique identifier for the location.",
    "type": "Type of GeoJSON object, usually 'Feature'.",
    "geometry": {
      "type": "The geometric type, such as 'Point' or 'Polygon'.",
      "coordinates": "Specific coordinates for the location's geometry."
    },
    "properties": {
      "aliases": "Alternative names or identifiers for the location.",
      "anchor": "Coordinates for where to display the location's icon or label.",
      "building": "The building where the location is found.",
      "categories": "Categories the location is assigned to, often in the CMS.",
      "description": "More details about the location.",
      "displayRule": {
        "description": "Visual rules for the location display, modified at runtime via 'mapsIndoorsInstance'.",
        "properties": "List of specific display rule properties."
      },
      "externalId": "An external ID for the location, if applicable.",
      "fields": "Additional custom properties for the location.",
      "floor": "The floor index indicating the location's floor level.",
      "floorName": "The name of the floor for UI elements.",
      "imageURL": "Link to an image of the location.",
      "locationType": "The display type of the location from CMS or API.",
      "mapElement": "Status of the map element's activity.",
      "name": "The location's name in the set language.",
      "type": "Additional type classification from CMS.",
      "venue": "The venue where the location is situated."
    }
  }
},
 {
   "Question": "Get Locations by Custom IDs and Locate on a Map",
   "Answer": "To get locations by custom IDs and locate them on a map, you can follow these steps:",
   "Context": {
      "Step 1": "Create an array of your custom IDs. For example, const myCustomIds = ['item1', 'item2', 'item3']; These IDs must be stored on MapsIndoors locations on the external ID property for this service to return any data.",
      "Step 2": "Iterate through your custom IDs using a forEach loop. For each custom ID, use the 'mapsindoors.services.LocationsService.getLocationsByExternalId' method to fetch the corresponding locations. Replace '[array of external IDs]' with your custom ID array.",
      "Step 3": "Check if any locations are returned. If the 'locations.length' is greater than 0, you can assume that data is available.",
      "Step 4": "Assuming the first location in the 'locations' array is relevant, retrieve it as 'location'. You can then optionally set the floor and center the map based on this location's information.",
      "Step 5": "Use 'mapsIndoorsInstance.setFloor(location.properties.floor)' or a known floor index to set the floor if they are all on the same floor, and 'mapInstance.setCenter' to center the map based on the location's anchor coordinates, or you may wish to find another way to center the map with some other data.",
      "Step 6": "If you wish, you may also set the zoom level if you know there are many locations spread over a larger distance with 'mapsIndoorsInstance.setZoom(FLOAT)' like 'setZoom(19.5)'"
   }
},
{
  "Question": "How can I filter data by the selected floor in MapsIndoors WebSDK?",
  "Answer": "You can listen to the 'floor_changed' event to trigger data filtering. Use 'mapsIndoorsInstance.addListener('floor_changed', (floorIndex) => { /* Your filtering logic here */ });' to execute a function whenever the floor changes, either through user interaction or by calling 'setFloor'.",
  "Context": {
    "Example": "mapsIndoorsInstance.addListener('floor_changed', (floorIndex) => {\n  filterDataBasedOnFloor(floorIndex);\n});\n\nfunction filterDataBasedOnFloor(floorIndex) {\n  // Implement filtering logic using the floorIndex\n}",
    "Note": "The 'floorIndex' is the new floor level after a change occurs. Use this in your app to filter or display content related to the selected floor."
  }
},
{
  "Question": "Can I set a floor in MapsIndoors WebSDK without the floor selector?",
  "Answer": "Yes, use 'mapsIndoorsInstance.setFloor(floorIndex)' where 'floorIndex' is an integer, often a multiple of 10, to specify the floor level programmatically.",
  "Context": "This method bypasses the UI and directly sets the floor, ideal for URLs pointing to a certain floor or automated floor navigation."
},
{
  "Question": "How do I trigger a popup for a location in MapsIndoors?",
  "Answer": "To display a popup when a location is clicked, add a 'click' event listener to your MapsIndoors instance that creates a new Mapbox popup with the location's details.",
  "Context": {
    "Code": "mapsIndoorsInstance.addListener('click', location => {\n  const [lng, lat] = location.properties.anchor.coordinates;\n  new mapboxgl.Popup()\n    .setLngLat([lng, lat])\n    .setHTML(`<h3>${location.properties.name}</h3>`)\n    .addTo(mapsIndoorsInstance.getMap());\n});"
  }
},
{
  "Question": "How to set a venue as the center on a Mapbox map in MapsIndoors?",
  "Answer": "Center a Mapbox map on a specific venue by fetching the venue's details from MapsIndoors and setting its anchor coordinates as the map's center point.",
  "Context": {
    "Code": "mapsIndoorsInstance.venuesService.getVenue('VENUE_ID').then(venue => {\n  const mapView = new mapsindoors.mapView.MapboxView({\n    accessToken: 'ACCESS_TOKEN',\n    center: [venue.anchor.coordinates[1], venue.anchor.coordinates[0]],\n    zoom: 15\n  });\n  new mapsindoors.MapsIndoors({ mapView });\n});"
  }
},


{
    "Question": "How do I display locations as a list in MapsIndoors?",
    "Answer": "You can display locations as a list in MapsIndoors by following these steps:",
    "Context": [
        {
            "Step": "Search for locations using the 'mapsindoors.services.LocationsService.getLocations' function, which returns a promise when the query has executed."
        },
        {
            "Step": "Attach an event listener to an input element (e.g., 'searchElement') to listen for user input."
        },
        {
            "Step": "Use a debounce function to prevent rapid successive calls to the service. This function introduces a delay of 500ms before executing the query, unless debounce is called again within 500ms, resetting the timer.",
            "Code": "searchElement.addEventListener('input', debounce((e) => {\n    const value = e.target.value;\n    if (value > '') {\n        mapsindoors.services.LocationsService.getLocations({ q: value, includeOutsidePOI: true })\n            .then(displayResults)\n            .then(filterMap);\n    } else {\n        clearResults();\n        clearFilter();\n    }\n}, 500));"
        }
    ]
},
{
    "Question": "What's the difference between setDisplayRule and filter methods on the MapsIndoors class?",
    "Answer": "The difference between the 'setDisplayRule' and 'filter' methods on the MapsIndoors class is as follows:",
    "Context": [
        {
            "Explanation": "You use the 'setDisplayRule' method to define a display rule for specific location objects. It allows you to customize the appearance of individual locations by specifying visual properties like colors, icons, or visibility."
        },
        {
            "Explanation": "On the other hand, the 'filter' method is used to control the visibility of location objects on the map. It allows you to hide all location objects except the ones specified in the filter. If 'null' is passed as the filter, it clears the filter and shows all location objects."
        },
        {
            "Important Note": "It's essential to distinguish between these two methods as they serve entirely different functionality. 'setDisplayRule' is for customizing the visual appearance of individual locations, while 'filter' is for controlling which location objects are displayed on the map."
        }
    ]
},
{
  "Question": "What's the method to center a MapsIndoors map?",
  "Answer": "Center the map by obtaining the Mapbox map object with 'mapsIndoorsInstance.getMap()' and using 'map.flyTo()' or 'map.setCenter()'.",
  "Context": {
    "FlyTo": {
      "Description": "Animates map to a new center point.",
      "Code": "mapsIndoorsInstance.getMap().flyTo({ center: [lng, lat] });"
    },
    "SetCenter": {
      "Description": "Instantly set the map's center.",
      "Code": "mapsIndoorsInstance.getMap().setCenter([lng, lat]);"
    },
    "Note": "Use location's anchor coordinates for centering on a specific location."
  }
},
{
  "Question": "How to manage pitch and bearing in MapsIndoors?",
  "Answer": "Manage map pitch and bearing with 'getPitch()', 'getBearing()', 'setPitch(value)', and 'setBearing(value)' methods on the Mapbox instance obtained via 'mapsIndoorsInstance.getMap()'.",
  "Context": {
    "Get": "Retrieve current values: 'mapsIndoorsInstance.getMap().getPitch()' and 'mapsIndoorsInstance.getMap().getBearing()'.",
    "Set": "Assign new values: 'mapsIndoorsInstance.getMap().setPitch(pitchValue)' and 'mapsIndoorsInstance.getMap().setBearing(bearingValue)'.",
    "Note": "Refer to Mapbox for valid pitch (0-85 degrees) and bearing values."
  }
},
{
  "Question": "How can I center my map on a specific MapsIndoors location?",
  "Answer": "Retrieve the location using 'getLocation' by ID and use its 'anchor.coordinates' to center the map.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getLocation('locationId').then(location => {\n  const center = location.properties.anchor.coordinates;\n  mapViewInstance.setCenter({ lat: center[1], lng: center[0] });\n});"
  }
},
{
  "Question": "How do I change the display icon for a MapsIndoors location?",
  "Answer": "Fetch the location by ID and apply a 'setDisplayRule' to change its icon.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getLocation('locationId').then(location => {\n  const customDisplayRule = { icon: 'newIconUrl' };\n  mapsIndoorsInstance.setDisplayRule(location.id, customDisplayRule);\n});"
  }
},
{
  "Question": "How to access and use metadata from a MapsIndoors location in my app?",
  "Answer": "Use 'getLocation' to obtain the location object and access its metadata for application-specific purposes.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getLocation('locationId').then(location => {\n  const metadata = location.properties.fields.customField;\n  // Use metadata as needed in your app\n});"
  }
},
{
  "Question": "How do you find MapsIndoors locations using external IDs?",
  "Answer": "Use 'getLocationsByExternalId' to fetch locations matching specific external IDs.",
  "Context": {
    "Code": "const ids = ['extId1', 'extId2'];\nmapsindoors.services.LocationsService.getLocationsByExternalId(ids).then(locations => { /* handle locations */ });"
  }
},
{
  "Question": "What method searches for MapsIndoors locations on a specific floor?",
  "Answer": "To search locations on a particular floor, call 'getLocations' with the 'floor' parameter.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getLocations({ floor: '5' }).then(locations => { /* handle locations */ });"
  }
},
{
  "Question": "How can you perform a text search for MapsIndoors locations?",
  "Answer": "Execute a text search using 'getLocations' with the 'q' parameter for query strings.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getLocations({ q: 'Conference' }).then(locations => { /* handle locations */ });"
  }
},
{
  "Question": "How to sort MapsIndoors location search results by a property?",
  "Answer": "Sort search results by specifying 'orderBy' and 'sortOrder' in the 'getLocations' method.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getLocations({ orderBy: 'name', sortOrder: 'ASC' }).then(locations => { /* handle sorted locations */ });"
  }
},
{
  "Question": "How do you limit MapsIndoors search results to a specific category?",
  "Answer": "Filter search results by category using the 'categories' parameter in 'getLocations'.",
  "Context": {
    "Code": "mapsindoors.services.LocationsService.getLocations({ categories: ['Cafe'] }).then(locations => { /* handle category-specific locations */ });"
  }
},
]
