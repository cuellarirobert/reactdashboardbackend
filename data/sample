[{"input": "Get Locations by Custom IDs and Populate a List",
  "output": "const myCustomIds = ['item1', 'item2', 'item3'];
const resultList = document.getElementById('location-list'); // Assuming you have an HTML list element
resultList.innerHTML = ''; // Clear existing list

mapsindoors.services.LocationsService.getLocationsByExternalId(array of external IDs).then(locations => {
  locations.forEach(location => {
    const listItem = document.createElement('li');
    listItem.textContent = location.properties.name;
    resultList.appendChild(listItem);
  });
});"
}

,{"input": "Highlight Locations by Custom IDs on the Map",
  "output": "const myCustomIds = ['item1', 'item2', 'item3'];

myCustomIds.forEach(customId => {
  mapsindoors.services.LocationsService.getLocationsByExternalId(array of external IDs).then(locations => {
    if (locations.length > 0) {
      const location = locations[0]; // Assuming the first location is relevant

      // Highlight the location on the map
      mapsIndoorsInstance.setHighlight(location.id, true);
    }
  });
});"
}






,{"input": "Search for mapsindoors locations by name using getLocations service",
  "output": "mapsindoors.services.LocationsService.getLocations({ q: 'Conference Room' }).then(locations => {
    // Handle the array of locations with names containing 'Conference Room'
  });
  "
}

,{"input": "Filter mapsindoors locations by mapsindoors categories using getLocations service",
  "output": "const categories = ['Meeting Room', 'Office'];
mapsindoors.services.LocationsService.getLocations({ categories }).then(locations => {
  // Handle the array of locations in the specified categories
});
"
}

,{"input": "Search for mapsindoors locations in a specific venue",
  "output": "mapsindoors.services.LocationsService.getLocations({
    venue: 'Venue123'
  }).then(locations => {
    // Handle the array of locations in 'Venue123'
  });
  "
}



,{"input": "Sort locations by a specific property in descending order",
  "output": "mapsindoors.services.LocationsService.getLocations({
    orderBy: 'capacity',
    sortOrder: 'DESC'
  }).then(locations => {
    // Handle the array of locations sorted by capacity in descending order
  });
  "
}




,{"input": "Get the location when a user clicks on a UI card",
  "output": "const locationId = '5666f75bc1843a08b81bef72'; // You get this ID from a UI card click event
mapsindoors.services.LocationsService.getLocation(locationId).then(location => {
  // Handle the location data
});
"
}



,{"input": "Get location details when a user selects a location from a list",
  "output": "const locationId = '7865a75bc1843a08b81cde45'; // You get this ID from a user's selection in a list
mapsindoors.services.LocationsService.getLocation(locationId).then(location => {
  // Handle the location data
});
"
}



,{"input": "Retrieve location details based on user interaction",
  "output": "const locationId = '9097f75bc1843a08b81dfe27'; // You obtain this ID from a user's interaction
mapsindoors.services.LocationsService.getLocation(locationId).then(location => {
  // Handle the location data
});
"
}

,{"input": "Access a custom property with the `getFieldForKey` method.",
  "output": {
    "method": "mapsindoors.services.LocationsService.getFieldForKey(key) â†’ Field",
    "description": "Get data for a custom property with the provided key, regardless of casing."
  }
}


,{"input": "Access a custom property with the key 'wikipage'.",
  "output": "const wikipageValue = mapsindoors.services.LocationsService.getFieldForKey('wikipage').value;\nconsole.log(wikipageValue);"
}


,{"input": "Access a custom property with the key 'customField'.",
  "output": "const customFieldValue = mapsindoors.services.LocationsService.getFieldForKey('customField').value;\nconsole.log(customFieldValue);"
}


,{"input": "Use the custom field in an example.",
  "output": "const infoWindowContent = `\n  <img src=\"${location.properties.imageURL}\" alt=\"${location.properties.description}\" width=\"100\" height=\"100\" />\n  <h2><a href=\"${location.properties.fields.wikipage.value}\" target=\"_blank\">${location.properties.name}</a></h2>\n`;"
}


,{"input": "How can I include the MapsIndoors Web SDK in my project and add dependencies for using MapsIndoors with a base map?",
  "output": "To include the MapsIndoors Web SDK, add the following script tag to your HTML: <script src='https://app.mapsindoors.com/mapsindoors/js/sdk/4.25.0/mapsindoors-4.25.0.js.gz'></script>. For a base map like Mapbox, you'll also need a Mapbox access token and should include these script and link tags: <script src='https://app.mapsindoors.com/mapsindoors/js/sdk/4.24.8/mapsindoors-4.24.8.js.gz?apikey=YOUR_MAPSINDOORS_API_KEY'></script> <script src='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js'></script> <link href='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css' rel='stylesheet'."
}



,{"input": "How do I create a map using MapsIndoors with a base map like Mapbox, and what options can I configure for the map view?",
  "output": "To create a map using MapsIndoors with Mapbox, you can use JavaScript code like this: const mapViewOptions = { accessToken: 'YOUR_MAPBOX_ACCESS_TOKEN', element: document.getElementById('map'), center: { lat: 38.8974905, lng: -77.0362723 }, zoom: 17, maxZoom: 22 }; const mapViewInstance = new mapsindoors.mapView.MapboxView(mapViewOptions); const mapsIndoorsInstance = new mapsindoors.MapsIndoors({ mapView: mapViewInstance }); You can configure various options for the mapViewOptions object, such as accessToken, element, center, zoom, and maxZoom to customize the map view."
}


,{"input": "How can I change the styling of specific map elements in MapsIndoors with a base map?",
  "output": "To change the styling of specific map elements, you can access the base map object from the mapViewInstance. For example, you can use mapViewInstance.getMap().setPaintProperty('MI_POINT_LAYER', 'text-halo-color', '#FFFFFF') to change the halo color of a specific layer on the base map. This interaction allows you to customize the visual style and behavior of the base map in harmony with your MapsIndoors implementation."
}


,{"input": "How can I get the current bearing of the map using the MapView object?",
  "output": "You can get the current bearing of the map by calling the `getBearing()` method on your MapView object. This method will return a number representing the map's current bearing."
}



,{"input": "How can I retrieve the current pitch of the map using the MapView object?",
  "output": "To obtain the current pitch of the map, you can use the `getPitch()` method provided by the MapView object. This method returns a number that represents the current pitch of the map."
}



,{"input": "How do I adjust the rotation (bearing) of the map using the MapView object?",
  "output": "To change the rotation of the map, you can use the `rotate(rotation)` method on the MapView object, where `rotation` is the desired rotation angle in degrees. This method allows you to adjust the map's orientation."
}



,{"input": "How can I modify the pitch (tilt) of the map using the MapView object?",
  "output": "To adjust the pitch (tilt) of the map, you can use the `tilt(pitch)` method on the MapView object, with `pitch` being the desired pitch angle in degrees. This method lets you change the perspective of the map."
}



,{"input": "How can I retrieve all values (key-value pairs) related to the map using the MapView object?",
  "output": "You can obtain all values as key-value pairs by calling the `getValues()` method on your MapView object. This method returns an object containing various properties and their associated values, providing details about the map's current state."
}



,{"input": "How can I use classes and methods from Mapbox in conjunction with the MapsIndoors MapView object?",
  "output": "You can access Mapbox classes and methods by using the `getMap()` method provided by the MapsIndoors MapView object. This method returns the base map object, allowing you to interact directly with Mapbox features. Keep in mind that MapsIndoors may perform various interactions with the map and its layers, so be cautious about potential conflicts when engaging in custom behavior with the base map. Thoroughly test your custom actions if you're making extensive modifications to the map outside of MapsIndoors-specific classes."
}




,{"input": "How can you create a new instance of MapsIndoors in your JavaScript code?",
  "output": "To create a new instance of MapsIndoors, you can use the constructor 'mapsindoors.MapsIndoors' and provide the required options during initialization."
}


,{"input": "What does the 'mapsIndoorsInstance' represent when you create it using 'new mapsindoors.MapsIndoors({...})'?",
  "output": "The 'mapsIndoorsInstance' represents the main controller for MapsIndoors, allowing you to manage and control various aspects of the map."
}


,{"input": "How can you change the floor in MapsIndoors using the 'setFloor' method?",
  "output": "You can change the floor in MapsIndoors by calling the 'setFloor' method and providing the 'floor' index as a parameter."
}


,{"input": "What kind of options can be modified using the 'setLabelOptions' method in MapsIndoors?",
  "output": "The 'setLabelOptions' method in MapsIndoors allows you to modify label options, including aspects like label alignment, color, font style, size, and more."
}



,{"input": "Provide an example of customizing label options in MapsIndoors using the 'setLabelOptions' method.",
  "output": "For example, you can customize label options by changing parameters such as alignment, color, font, size, and stroke style to create a custom label style."
}



,{"input": "How can you create a new instance of MapsIndoors in your JavaScript code?",
  "output": "To create a new instance of MapsIndoors, you can use the constructor 'mapsindoors.MapsIndoors' and provide the required options during initialization.",
  "code": "const mapsIndoorsInstance = new mapsindoors.MapsIndoors({\n    mapView: mapViewInstance\n});"
}



,{"input": "What does the 'mapsIndoorsInstance' represent when you create it using 'new mapsindoors.MapsIndoors({...})'?",
  "output": "The 'mapsIndoorsInstance' represents the main controller for MapsIndoors, allowing you to manage and control various aspects of the map.",
  "code": "// 'mapsIndoorsInstance' is the main controller for MapsIndoors\nconst mapsIndoorsInstance = new mapsindoors.MapsIndoors({\n    mapView: mapViewInstance\n});"
}



,{"input": "How can you change the floor in MapsIndoors using the 'setFloor' method?",
  "output": "You can change the floor in MapsIndoors by calling the 'setFloor' method and providing the 'floor' index as a parameter. It's the MapsIndoors instance that will set the floor via the setFloor method. It requires the floor index to be passed as the single argument of this method.",
  "code": "// Change the floor using 'setFloor'\nmapsIndoorsInstance.setFloor(2) or you can use setFloor against location.properties.floor;"
}



,{"input": "What kind of options can be modified using the 'setLabelOptions' method in MapsIndoors?",
  "output": "The 'setLabelOptions' method in MapsIndoors allows you to modify label options, including aspects like label alignment, color, font style, size, and more. It's the MapsIndoors instance that has a method called 'setDisplayRule' and it must make the action of setting the display rule. It will have a target of objects, e.g. a single location or an array of locations, and a display rule. Together the MapsIndoors instance will apply the display rule to those targets.",
  "code": "// Modify label options using 'setLabelOptions'\nconst labelOptions = {\n    style: {\n        align: 'left',\n        color: '#FF5733',\n        fontFamily: 'Arial, sans-serif',\n        fontSize: '14px',\n        fontWeight: 600\n    }\n};\nmapsIndoorsInstance.setLabelOptions(labelOptions);"
}



,{"input": "Provide an example of customizing label options in MapsIndoors using the 'setLabelOptions' method.",
  "output": "For example, you can customize label options by changing parameters such as alignment, color, font, size, and stroke style to create a custom label style. It's the MapsIndoors instance that has a method called 'setDisplayRule' and it must make the action of setting the display rule. It will have a target of objects, e.g. a single location or an array of locations, and a display rule. Together the MapsIndoors instance will apply the display rule to those targets.",
  "code": "// Example of customizing label options\nconst customLabelOptions = {\n    style: {\n        align: 'center',\n        color: '#007BFF',\n        fontFamily: 'Arial, Helvetica, sans-serif',\n        fontSize: '16px',\n        fontWeight: 700,\n        strokeStyle: '#000',\n        strokeWeight: 2\n    }\n};\nmapsIndoorsInstance.setLabelOptions(customLabelOptions);"
}


,
"input": "How can I change the icon for specific types or locations at runtime in MapsIndoors?",
"output": "To change the icon for specific types or locations at runtime in MapsIndoors, you can use the mapsIndoorsInstance.setDisplayRule method. This method allows you to define a custom display rule that includes the icon and other properties. You can apply this rule to one or more locations by providing their IDs in an array. Here's an example of how to do it:",
"code": "// Example: Changing the icon for specific locations\nconst locationIds = [\n '3ee585cd801d47e5b8c4d66a',\n '437265b21c6047d2aff066b7',\n '09d96b96e77a4d8ab8a29352'\n];\n\nconst customDisplayRule = {\n polygonVisible: true,\n polygonFillColor: '#90ee90',\n polygonFillOpacity: 1,\n polygonZoomFrom: 16,\n polygonZoomTo: 22,\n visible: true,\n icon: 'custom_meeting_room_icon.png'\n};\n\nmapsIndoorsInstance.setDisplayRule(locationIds, customDisplayRule);"
}

,{"input": "What are MapsIndoors locations and what can I do with them?",
  "output": "MapsIndoors locations are versatile data points representing specific geographical spots. They can be offices, exhibitors, or room features like firehoses, coffee machines, and TVs. Referred to as 'Locations,' 'Places,' or 'POIs' interchangeably, MapsIndoors uses 'Locations' to define these points. These locations have properties such as ID, type, geometry (in GeoJSON format), aliases, anchor, building, categories, description, display rule, and more. You can interact with these locations using the MapsIndoors SDK through the 'MapsIndoors' class and its 'setDisplayRule' method. This method enables customization of display rules for one or multiple locations, allowing settings like polygon visibility, fill color, and custom icons."
}


,{"input": "How can I adjust the icon size when a user hovers over a location in MapsIndoors?",
  "output": "You can adjust the icon size when a user hovers over a location by specifying the 'iconScale' property in the DisplayRule for that location.",
  "code": "// Example: Increasing icon size on hover\nconst hoverDisplayRule = {\n    iconScale: 1.2\n};\nmapsIndoorsInstance.setDisplayRule(locationId, hoverDisplayRule);"
}



,{"input": "How can I make location labels visible only at specific zoom levels in MapsIndoors?",
  "output": "You can control the visibility of location labels at different zoom levels by setting the 'labelZoomFrom' and 'labelZoomTo' properties in the DisplayRule for those locations.",
  "code": "// Example: Display labels between zoom levels 16 to 18\nconst labelDisplayRule = {\n    labelZoomFrom: 16,\n    labelZoomTo: 18\n};\nmapsIndoorsInstance.setDisplayRule(locationId, labelDisplayRule);"
}


,{"input": "How can I hide the polygon for a specific type when zoomed out in MapsIndoors?",
  "output": "You can hide the polygon for a specific type when zoomed out by configuring the 'polygonVisible,' 'polygonZoomFrom,' and 'polygonZoomTo' properties in the DisplayRule for that type.",
  "code": "// Example: Hiding the polygon when zoomed out\nconst hidePolygonDisplayRule = {\n    polygonVisible: false,\n    polygonZoomFrom: 16,\n    polygonZoomTo: 18\n};\nmapsIndoorsInstance.setDisplayRule('building', hidePolygonDisplayRule);"
}

,
"input": "What kinds of properites can be modified within a display rule?",
"output": "
displayRule: {
    visible: true,
    iconVisible: true,
    zoomFrom: 16.0,
    zoomTo: 22.0,
    icon: "https://app.mapsindoors.com/mapsindoors/cms/assets/icons/misc/default-marker.png?71488",
    iconScale: 1.0,
    iconSize: {
        width: 20.0,
        height: 20.0
    },
    labelVisible: true,
    label: '{{name}}',
    labelZoomFrom: 16.0,
    labelZoomTo: 22.0,
    labelMaxWidth: 0, //0 means infinite eg lines will not be broken based on width
    polygon: {
        visible": false,
        zoomFrom": 18,
        zoomTo": 22,
        strokeWidth": 2.0,
        strokeColor": '#3071D9',
        strokeOpacity": 1.0,
        fillColor": '#3071D9',
        fillOpacity": 0.2
    },
    walls: { 
        visible": true,
        color": '#707a89',
        height": 2.0,
        zoomFrom": 16.0,
        zoomTo": 22.0
    },
    extrusion: {
        visible: true,
        color: '#aeb9cb',
        height: 2.25,
        zoomFrom: 16.0,
        zoomTo: 22.0
    },
    model3D: { 
        visible: true,
        zoomFrom: 16.0,
        zoomTo: 22.0,
        model: null,
        rotationX: 0.0,
        rotationY: 0.0,
        rotationZ: 0.0
    },
    model2D: {
        visible": true,
        zoomFrom": 16.0,
        zoomTo": 22.0,
        model": null,
        widthMeters": 0,
        heightMeters": 0,
        bearing":0
    }
}"{
    "Question": "How can I retrieve the location details by external IDs like 'ABC123', 'ABC124,' and 'ABC125' using MapsIndoors?",
    "Answer": "mapsIndoorsInstance.getLocationsByExternalId(['ABC123', 'ABC124', 'ABC125'])\n  .then(locations => {\n    // Handle the retrieved locations here\n  });",
    "Context": "ASYNC STATIC\ngetLocationsByExternalId(externalId) â†’ {Promise.<Array.<Location>>}\nGet locations by externalId\n\nParameters:\n- externalId (string | or Array.<string>): The externalId of the location or an array of external IDs.\n\nReturns:\nType: Promise.<Array.<Location>>\n\nThis function retrieves location information based on external IDs. It returns a Promise that resolves to an array of Location objects. You can use this function to fetch location data by providing one or more external IDs."
  },
  {
    "Question": "How do I get the location object with MapsIndoors location ID '5666f75bc1843a08b81bef72'?",
    "Answer": "mapsindoors.services.LocationsService.getLocation('5666f75bc1843a08b81bef72').then(location => { ... });",
    "Context": "ASYNC STATIC\ngetLocation(id) â†’ {Promise.<Location>}\nGet a location by its id\n\nParameters:\n- id (string): The ID of the location you want to retrieve.\n\nReturns:\nType: Promise.<Location>\n\nExample:\n\n```javascript\nmapsindoors.services.LocationsService.getLocation('5666f75bc1843a08b81bef72').then(location => { ... });\n```\n\nThis function allows you to fetch the location object by providing the ID of the MapsIndoors location. It returns a Promise that resolves to the location object, which you can then work with in your code."
  },
  {
    "Question": "How do I get all MapsIndoors locations near MapsIndoors location with ID '5666f75bc1843a08b81bef72' that are of location type 'Meetingroom' on floor index 50?",
    "Answer": "mapsindoors.services.LocationsService.getLocations({ near: '5666f75bc1843a08b81bef72', floor: 50, types: ['Meetingroom'] });",
    "Context": "ASYNC STATIC\ngetLocations(options) â†’ {Promise.<Array.<Location>>}\nGet a list of locations that meet specified criteria.\n\nParameters:\n- options (Object): An object specifying the criteria for location retrieval, which can include:\n  - near (string): The ID of the reference location to search nearby.\n  - floor (number): The floor index on which to search for locations.\n  - types (Array<string>): An array of location types to filter the results.\n\nReturns:\nType: Promise.<Array.<Location>>\n\nExample:\n\n```javascript\nmapsindoors.services.LocationsService.getLocations({ near: '5666f75bc1843a08b81bef72', floor: 50, types: ['Meetingroom'] });\n```\n\nThis function allows you to retrieve a list of locations that match the specified criteria, such as being near a particular location, on a specific floor, and of a specific type, in this case, 'Meetingroom'. The function returns a Promise that resolves to an array of Location objects that meet the criteria."
  },
  {
    "Question": "How do I filter for MapsIndoors locations based on their assigned categories in MapsIndoors?",
    "Answer": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <script src=\"https://app.mapsindoors.com/mapsindoors/js/sdk/4.25.0/mapsindoors-4.25.0.js.gz?apikey=demo\"></script>\n    <title>2. Categories</title>\n</head>\n\n<body>\n    <select id=\"select_categories\" multiple></select>\n    <div id=\"results\"></div>\n    <script>\n        const results = document.getElementById('results');\n        const select_categories = document.getElementById('select_categories');\n\n        select_categories.addEventListener('change', search);\n\n        mapsindoors.services.SolutionsService.getCategories()\n            .then(categories => {\n                select_categories.innerHTML = categories.map(category => `<option value=\"${category.key}\">${category.value}</option>`).join('');\n                select_categories.size = categories.length;\n            });\n\n        function search() {\n            const categories = Array.from(select_categories.selectedOptions).map(option => option.value);\n            console.log(categories);\n            if (categories.length > 0) {\n                mapsindoors.services.LocationsService.getLocations({ categories: categories })\n                    .then(locations => locations.filter(location => location.properties.name > ''))\n                    .then(locations => {\n                        results.innerHTML = locations.length > 0 ? `<ul>${locations.map(location => `<li>${location.properties.name}</li>`).join('')}</ul>`: 'No result!';\n                    })\n            } else {\n                results.innerHTML = '';\n            }\n        }\n\n        function groupByCategory(locations) {\n            return locations.reduce((categories, location) => {\n                Object.values(location.properties.categories).forEach(category => {\n                    if (categories.has(category)) {\n                        categories.get(category).push(location);\n                    } else {\n                        categories.set(category, [location]);\n                    }\n                });\n                return categories;\n            }, new Map())\n        }\n    </script>\n</body>\n\n</html>",
    "Context": "ASYNC STATIC\ngetLocations(argsopt) â†’ {Promise.<Array.<Location>>}\nSearch for locations.\n\nParameters:\n- categories (Array.<string>): An optional parameter that allows you to filter locations based on assigned categories. You can provide a list of category names as an array, e.g., ['meeting_room', 'office', ...]. A location can belong to multiple categories.\n\nThis HTML script demonstrates how to filter MapsIndoors locations based on selected categories. It utilizes the MapsIndoors JavaScript SDK to retrieve categories and filter locations based on the selected categories. The selected categories are obtained from a dropdown menu, and locations matching the selected categories are displayed in a list.\n\nYou can adapt and integrate this script into your web application to filter MapsIndoors locations by categories."
  },
  {
    "Question": "How do I get all bathrooms within the venue called City Campus?",
    "Answer": "mapsindoors.services.LocationsService.getLocations({q: 'S102', venue: \"CITY_CAMPUS\", fields: \"name,aliases\"}).then(locations => { ... });",
    "Context": "Context:\nq (string) - An optional parameter that allows you to use a text query to search for one or more locations.\nfields (string) - An optional parameter that specifies the fields to search in when using the search string parameter 'q'. By default, it includes \"name,description,aliases,categories\".\nvenue (string) - An optional parameter that limits the search for locations to a specific venue, identified by its ID or name."
  },
  {
    "Question": "How do I show a MapsIndoors map on my website?",
    "Answer": "<!-- index.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>MapsIndoors</title>\n  <script src=\"https://app.mapsindoors.com/mapsindoors/js/sdk/4.25.0/mapsindoors-4.25.0.js.gz?apikey=demo\"></script>\n  <script src='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js'></script>\n  <link href='https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css' rel='stylesheet' />\n</head>\n<body>\n<div id=\"map\" style=\"width: 600px; height: 600px;\"></div>\n<script type=\"text/javascript\">\n\nconst mapViewOptions = {\n    accessToken: 'YOUR_MAPBOX_TOKEN',\n    element: document.getElementById('map'),\n    center: { lat: 38.8974905, lng: -77.0362723 }, // The White House\n    zoom: 19,\n    maxZoom: 22,\n};\nconst mapViewInstance = new mapsindoors.mapView.MapboxView(mapViewOptions);\nconst mapsIndoorsInstance = new mapsindoors.MapsIndoors({\n    mapView: mapViewInstance,\n});\n</script>\n</body>\n</html>",
    "Context": "Context:\n\n- `MapboxView` is the MapsIndoors MapView for MapBox, and you can pass Mapbox parameters to it.\n- `element` is the HTML element in which the map will be rendered.\n- `accessToken` is the Mapbox access token required for map rendering.\n- `center` specifies the initial geographical centerpoint of the map.\n- `zoom` sets the initial zoom level of the map.\n- `maxZoom` defines the maximum zoom level of the map.\n\n- `MapsIndoors` is a class that creates a new instance of MapsIndoors. You can provide options including `mapView` (an instance of a MapView), `venue` (the initial venue), `buildingOutlineOptions`, and `labelOptions`."
  },
  {
    "Question": "What are the Namespaces in the MapsIndoors Web SDK?",
    "Answer": "The MapsIndoors Web SDK has the following Namespaces:\n- `mapsindoors`\n- `directions`\n- `mapView`\n- `services`",
    "Context": "Namespaces are initialized when the script tag loads."
  },
  {
    "Question": "What are the Classes in the MapsIndoors Web SDK?",
    "Answer": "The MapsIndoors Web SDK includes several Classes, which need to be instantiated at runtime by the developer. Some of these classes are:\n- `BadgeRenderer`\n- `BookingAuthenticationConfig`\n- `DirectionsRenderer`\n- `FloorSelector`\n- `GoogleMapsProvider`\n- `GoogleMapsView`\n- `KVOObject`\n- `LiveDataInfo`\n- `LiveDataManager`\n- `Location`\n- `Mapbox2DLayer`\n- `MapboxProvider`\n- `MapboxView`\n- `MapsIndoors`\n- `MPBooking`\n- `PositionControl`\n- `Settings3D`\n- `SolutionConfig`\n- `UserRole`",
    "Context": "Classes need to be instantiated at runtime by the developer."
  },
  {
    "Question": "What are the Interfaces in the MapsIndoors Web SDK?",
    "Answer": "Interfaces in the MapsIndoors Web SDK describe the key-value pairs for different objects. Some of the Interfaces include:\n- `AppConfig`\n- `Building`\n- `BuildingOutlineOptions`\n- `Category`\n- `DirectionsRendererOptions`\n- `DirectionsRequest`\n- `DirectionsResult`\n- `DisplayRule`\n- `DistanceMatrixResult`\n- `EntryPoint`\n- `Field`\n- `LabelOptions`\n- `LatLngLiteral`\n- `Leg`\n- `LiveUpdate`\n- `MapsIndoorsOptions`\n- `MapStyle`\n- `Padding`\n- `PositionControlOptions`\n- `ReverseGeoCodeResult`\n- `Route`\n- `Solution`\n- `Step`\n- `StepContext`\n- `Type`\n- `Venue`",
    "Context": "Interfaces provide a structured definition of objects within MapsIndoors."
  },
  {
    "Question": "What Services are available in the MapsIndoors Web SDK?",
    "Answer": "The MapsIndoors Web SDK offers various Services, and they do not need to be initialized separately as they are all methods of the already initialized `mapsindoors` namespace. Some of the Service classes include:\n- `AppConfigService`\n- `BookingService`\n- `DirectionsService`\n- `DistanceMatrixService`\n- `GeoCodeService`\n- `LocationsService`\n- `ShareService`\n- `SolutionsService`\n- `VenuesService`",
    "Context": "Services are accessed through the `services` namespace and provide functionality like routing, geocoding, and venue management."
  },
  {
   "Question": "How can I retrieve a list of all categories associated with the current solution using the MapsIndoors Web SDK?",
   "Answer": "You can get a list of all categories associated with the current solution by calling the `getCategories` method of the `SolutionsService` class. Here's an example of how to use it:\n\n```javascript\nmapsindoors.services.SolutionsService.getCategories().then(categories => { /* Handle the list of categories here */ });\n```",
   "Context": "This method allows you to fetch the categories that are available within your current solution, which can be useful for categorizing different aspects of your MapsIndoors data."
 },
 {
   "Question": "How do I obtain detailed information about the current solution in the MapsIndoors Web SDK?",
   "Answer": "To get detailed information about the current solution, you can use the `getSolution` method provided by the `SolutionsService` class. Here's an example of how to call it:\n\n```javascript\nmapsindoors.services.SolutionsService.getSolution().then(solution => { /* Handle the solution details here */ });\n```",
   "Context": "This method is useful for retrieving comprehensive information about the currently loaded solution, including details like venue, building, and configuration settings."
 },
 {
   "Question": "How can I retrieve a list of available user roles associated with the current solution in the MapsIndoors Web SDK?",
   "Answer": "You can obtain a list of available user roles associated with the current solution by using the `getUserRoles` method from the `SolutionsService` class. Here's an example of how to do it:\n\n```javascript\nmapsindoors.services.SolutionsService.getUserRoles().then(userRoles => { /* Handle the user roles list here */ });\n```",
   "Context": "This method enables you to fetch the available user roles within your current solution, which can be valuable for role-based access control and user management in your MapsIndoors application. User roles allow you to define Locations and Routes based on specific roles, providing a more tailored experience for different user groups."
 },
 {
   "Question": "How can I populate a dropdown menu with a list of buildings for a selected venue in the MapsIndoors Web SDK?",
   "Answer": "To populate a dropdown menu with a list of buildings for a selected venue, you can use the `getBuildings` method from the `VenuesService` class to retrieve the buildings. Once you have the buildings, you can iterate through them and create dropdown options to represent each building. Here's an example:\n\n```javascript\nmapsindoors.services.VenuesService.getBuildings(venueId).then((buildings) => { ... });\n```",
   "Context": "This method allows you to dynamically populate a dropdown menu with buildings specific to the selected venue, which can be helpful for users to choose a building and access location-related information or services."
 },
 {
   "Question": "How can I populate a dropdown menu with a list of venues in the MapsIndoors Web SDK?",
   "Answer": "To populate a dropdown menu with a list of venues, you can use the `getVenues` method from the `VenuesService` class to retrieve the venues. Once you have the venues, you can populate the dropdown with the venue options. Here's an example:\n\n```javascript\nmapsindoors.services.VenuesService.getVenues().then((venues) => { ... });\n```",
   "Context": "This method enables you to provide users with a dropdown menu containing a list of venues available in your MapsIndoors solution, making it easy for them to select a venue and navigate to specific locations within it."
 },
 {
   "Question": "How can I listen to the 'building_changed' event in MapsIndoors?",
   "Answer": "You can listen to the 'building_changed' event by calling 'mapsIndoors.addListener('building_changed', (building) => {...});'. This event fires when the building focus changes, either by map movement or by calling 'mapsIndoors.fitBuilding(building)'.",
   "Context": "This event is useful for detecting changes in the focused building, which can be important for dynamic content updates or user interactions based on the building context."
 },
 {
   "Question": "What is the 'building_outline_changed' event in MapsIndoors used for?",
   "Answer": "The 'building_outline_changed' event is used to detect when the style for the building outline has changed in MapsIndoors.",
   "Context": "This event is handy when you need to respond to changes in the visual representation of building outlines, which may be triggered by style adjustments or other factors."
 },
 {
   "Question": "How do you listen to when a user clicks on the map with a 'click' event in MapsIndoors?",
   "Answer": "To listen to the 'click' event, you can use 'mapsIndoors.addListener('click', (location) => {...});'. This event is triggered when a location on the map is clicked.",
   "Context": "The 'click' event allows you to capture user interactions with map locations, making it essential for implementing custom click behavior, like the beginning of a flow which results in showing a Mapbox popup."
 },
 {
   "Question": "What is the purpose of the 'floor_changed' event in MapsIndoors?",
   "Answer": "The 'floor_changed' event is used to detect when the floor index changes. You can listen to it using 'mapsIndoors.addListener('floor_changed', (floorIndex) => {...});'. The floor index can change through 'mapsIndoors.setFloor(index)' or interaction with the FloorSelector.",
   "Context": "This event is crucial for maintaining awareness of floor level changes and enables you to adapt the UI or data displayed on the map accordingly."
 },
 {
   "Question": "How do you listen to the 'label_options_changed' event in MapsIndoors?",
   "Answer": "To listen to the 'label_options_changed' event, you can use 'mapsIndoors.addListener('label_options_changed', () => {...});'. This event is triggered when the style for labels changes.",
   "Context": "This event is relevant for tracking changes in label styling, which can be essential for maintaining consistent and appealing label presentations."
 },
 {
   "Question": "What is the 'mouseenter' event in MapsIndoors used for?",
   "Answer": "The 'mouseenter' event is used when the cursor enters the bounds of a location. You can listen to it with 'mapsIndoors.addListener('mouseenter', (location) => {...});'.",
   "Context": "The 'mouseenter' event is valuable for capturing user interactions when the cursor enters a location's area, which can be used for providing additional information or highlighting features."
 },
 {
   "Question": "How can I detect when the cursor leaves the bounds of a location in MapsIndoors?",
   "Answer": "You can use the 'mouseleave' event by listening to 'mapsIndoors.addListener('mouseleave', (location) => {...});'. This event fires when the cursor leaves the bounds of a location.",
   "Context": "The 'mouseleave' event is essential for detecting when the cursor exits a location's area, allowing you to trigger relevant actions or changes in response. Example you may wish to hide a popup when a user mouseleaves a MapsIndoors area."
 },
 {
   "Question": "What is the purpose of the 'ready' event in MapsIndoors?",
   "Answer": "The 'ready' event is used to signal that MapsIndoors has been initialized and is ready for use. You can listen to it using 'mapsIndoors.addListener('ready', () => {...});'.",
   "Context": "The 'ready' event indicates when MapsIndoors is fully initialized and prepared for interactions, making it a crucial event for starting any application logic that relies on MapsIndoors."
 },
 {
   "Question": "How can you detect when display rules or locations change and those changes are reflected on the map in MapsIndoors?",
   "Answer": "You can listen to the 'redraw' event with 'mapsIndoors.addListener('redraw', () => {...});'. This event fires when a display rule or location changes, and those changes are reflected on the map.",
   "Context": "The 'redraw' event is beneficial for developers to respond to dynamic map updates caused by changes to display rules"
 },
 {
   "Question": "What does the 'zoom_changed' event in MapsIndoors signify?",
   "Answer": "The 'zoom_changed' event signifies a change in map zoom level. You can listen to it using 'mapsIndoors.addListener('zoom_changed', (zoomLevel) => {...});'. It provides a normalized MapsIndoors zoom level, which is recommended for evaluating DisplayRules due to differences in zoom levels across different map providers.",
   "Context": "This event is crucial for tracking changes in zoom level, which can affect the presentation and visibility of map features. It provides a normalized zoom level for consistency across different map providers."
 },
 {
   "Question": "How can I change the icon or color of a location when a user clicks on it?",
   "Answer": "You can change the icon or color of a location when a user clicks on it by listening to the 'click' event and dynamically updating the display rule for that location. Here's the code example: mapsIndoorsInstance.addListener('click', (location) => { const newDisplayRule = { visible: true, polygonVisible: true, polygonFillColor: \"#FFF122\", icon: \"https://app.mapsindoors.com/mapsindoors/cms/assets/icons/misc/custom-marker.png\", iconVisible: true, iconScale: 1.5 }; mapsIndoorsInstance.setDisplayRule(location.id, newDisplayRule); });",
   "Context": "In this code, we listen for the 'click' event and create a new display rule to update the location's visibility, polygon, polygon fill color, icon, and more. You can customize these properties to achieve the desired appearance changes."
 },
 {
   "Question": "How can I create custom selection in MapsIndoors?",
   "Answer": "You can create custom selection in MapsIndoors by using display rules to adjust the appearance of location results programmatically. Here's an example of how to set locations, especially polygons, to red and reset the display rule back to their original settings using setDisplayRule(id, null):\n\n```javascript\nlet previousLocationIds = []; // Keep track of previously selected locations\n\n// Custom selection function\nconst selectLocations = (locationIds, rule) => {\n    // Clear display rules of previously selected locations\n    if(previousLocationIds.length > 0) {\n        clearSelection(previousLocationIds);\n    }\n\n    // Apply the display rule to all the locations\n    locationIds.forEach(id => {\n        mapsIndoorsInstance.setDisplayRule(id, rule);\n    });\n\n    // Update the list of previously selected locations\n    previousLocationIds = locationIds;\n};\n\nconst clearSelection = (locationIds) => {\n    // Reset the display rule of all the locations\n    locationIds.forEach(id => {\n        mapsIndoorsInstance.setDisplayRule(id, null);\n    });\n};\n\nconst rule = { \n    visible: true,\n    polygonVisible: true,\n    polygonFillColor: \"#FF0000\",\n    polygonFillOpacity: 1,\n    iconSize: \n    {\n        width: 30,\n        height: 30\n    },\n    labelVisible: true,\n};\n```\n",
   "Context": "In this code example, you can create custom selection by defining a selection function that applies a display rule to specified location IDs. The code allows you to set the locations, particularly polygons, to a red color and provides a way to reset the display rule for those locations. This custom selection method enables you to adjust the appearance of location results according to your specific requirements. This will impact what the visibility looks like if polygonVisibility is set to true in the display rule."
 },
 {
   "Question": "How can I hide all other content on the map except what I'd like to filter?",
   "Answer": "Hiding all other content on the map, except what you'd like to filter, is primarily relevant when working with Raster tiles. However, keep in mind that hiding all other content may result in very limited visibility on the map for users. To achieve this, you can use the `mapsIndoorsInstance.filter(locationIds)` method after performing a search. The `filter` parameter should be an array of location IDs to filter the map by. You can pass `null` as the filter to clear the filter.",
   "Context": "The provided code example demonstrates how to filter locations based on category and provides a way to control the visibility of specific location content on the map. It's important to consider the implications of hiding all other content, as it may result in a limited map view for users."
 },
 {
   "Question": "Please explain all the properties of a MapsIndoors location object",
   "Answer": "A MapsIndoors location object represents a location on the map following the GeoJSON Feature specification and contains various properties. Here is an explanation of the properties:",
   "Context": {
      "id": "Unique identifier of the location.",
      "type": "Specifies the GeoJSON object type.",
      "geometry": "Defines the spatial aspects of the location, including coordinates and type. Will be a Point or Polygon, and the structure of the geometry property data will depend on that.",
      "properties": "Contains various attributes and custom properties of the location.",
      "properties.aliases": "Alternate names or identifiers for the location, generally used as a search query field.",
      "properties.anchor": "Specifies a point (lat, lng) where the icon/label is presented. This is very useful for determining where to place a popup or info window.",
      "properties.building": "The building in which the location is situated.",
      "properties.categories": "Categories assigned to the location, usually in the CMS.",
      "properties.description": "A text description providing additional information about the location.",
      "properties.displayRule": "Rules affecting the visual representation of the location. You should use the interface called Display Rule for a list of its properties and use mapsIndoorsInstance to modify the display rule at runtime.",
      "properties.externalId": "An optional external identifier for the location.",
      "properties.fields": "Custom properties defined for the location.",
      "properties.floor": "The floor index (from MapsIndoors CMS) on which the location is situated. You need to use your mapsIndoorsInstance.setFloor to change the maps floor for the end user.",
      "properties.floorName": "The name of the floor, typically presented in the floor selector.",
      "properties.imageURL": "A URL linking to an image related to the location.",
      "properties.locationType": "The location type or display type name from the MapsIndoors CMS or Integration API.",
      "properties.mapElement": "Indicates whether the map element is active.",
      "properties.name": "The name of the location in the current language set by the SDK.",
      "properties.type": "Additional type classification of the location from the MapsIndoors CMS.",
      "properties.venue": "The venue in which the location is placed."
   }
 },
 {
   "Question": "Get Locations by Custom IDs and Locate on a Map",
   "Answer": "To get locations by custom IDs and locate them on a map, you can follow these steps:",
   "Context": {
      "Step 1": "Create an array of your custom IDs. For example, const myCustomIds = ['item1', 'item2', 'item3']; These IDs must be stored on MapsIndoors locations on the external ID property for this service to return any data.",
      "Step 2": "Iterate through your custom IDs using a forEach loop. For each custom ID, use the 'mapsindoors.services.LocationsService.getLocationsByExternalId' method to fetch the corresponding locations. Replace '[array of external IDs]' with your custom ID array.",
      "Step 3": "Check if any locations are returned. If the 'locations.length' is greater than 0, you can assume that data is available.",
      "Step 4": "Assuming the first location in the 'locations' array is relevant, retrieve it as 'location'. You can then optionally set the floor and center the map based on this location's information.",
      "Step 5": "Use 'mapsIndoorsInstance.setFloor(location.properties.floor)' or a known floor index to set the floor if they are all on the same floor, and 'mapInstance.setCenter' to center the map based on the location's anchor coordinates, or you may wish to find another way to center the map with some other data.",
      "Step 6": "If you wish, you may also set the zoom level if you know there are many locations spread over a larger distance with 'mapsIndoorsInstance.setZoom(FLOAT)' like 'setZoom(19.5)'"
   }
},
{
   "Question": "How can I determine the currently active/displayed floor in MapsIndoors WebSDK using JavaScript?",
   "Answer": "You can use the 'getFloor()' method to determine the currently active floor in MapsIndoors WebSDK. For example, you can call 'myMapsIndoorsInstance.getFloor()' to retrieve the active floor index, and then use this index to perform specific actions or conditions based on the floor. In your code, you can store the active floor index in a variable (e.g., 'x') and check it to perform actions like 'if (x === 8) { // do something }'.",
   "Context": "The 'mapsIndoorsInstance.getFloor()' method allows you to programmatically access the current active floor. The floor index returned is an integer, typically a multiple of 10."
},
{
   "Question": "Is it possible to load a particular floor immediately in MapsIndoors WebSDK without using the floor selector?",
   "Answer": "Yes, it is possible to load a specific floor immediately in MapsIndoors WebSDK without relying on the floor selector. You can use the 'setFloor(floorIndex)' method to programmatically set the desired floor. For example, you can call 'myMapsIndoorsInstance.setFloor(floorIndex)' to load a particular floor without having to change the default floor globally. The 'floorIndex' should be an integer and typically a multiple of 10, representing the desired floor.",
   "Context": "The 'mapsIndoorsInstance.setFloor()' method allows you to select and load a specific floor in MapsIndoors WebSDK without requiring user interaction through the floor selector. This is useful for providing direct links to specific floors or programmatically controlling the displayed floor."
},
{
    "Question": "How do I add Mapbox popups when I click on a location or search for one?",
    "Answer": "To add Mapbox popups when clicking on a location or searching for one in MapsIndoors, you can follow these steps:",
    "Context": [
        {
            "Step": "Define how you want to retrieve the location, either by searching or using a click listener event via the MapsIndoors SDK."
        },
        {
            "Step": "Once you have the location objects, you can work with the following JavaScript code:",
            "Code": "let popup;\n\nconst handleMouseEnter = debounce((location) => {\n    // If a popup exists, remove it\n    if (popup) {\n        popup.remove();\n    }\n\n    console.log('hi');\n    console.log(location);\n\n    const coords = location.properties.anchor.coordinates;\n\n    const infoWindowContent = `<h2>${location.properties.name}</h2>`;\n\n    popup = new mapboxgl.Popup({ closeOnClick: true, closeButton: true, className: 'info-popup' })\n        .setLngLat([coords[1], coords[0]])\n        .setHTML(infoWindowContent)\n        .addTo(mapInstance);\n}, 500); // Debounce time is 250 milliseconds"
        },
        {
            "Step": "In this code, 'mapInstance' would typically be the 'mapsIndoorsInstance.getMapView(mapView)' where 'mapView' is initialized when you need to load the map on the page.",
            "Example": "const mapView = new mapsindoors.mapView.MapboxView(...);\nconst mapsIndoors = new mapsindoors.MapsIndoors({mapView: mapView})"
        }
    ]
},
{
    "Question": "How can I obtain the venue's anchor point and set it as the center for my Mapbox map in MapsIndoors using the client library?",
    "Answer": "To obtain the venue's anchor point and set it as the center for your Mapbox map in MapsIndoors, you can follow these steps:",
    "Context": [
        {
            "Step": "Call the venue service to get all venues or call 'getVenue('VENUE_ID')' to get a single venue by its ID."
        },
        {
            "Step": "Find the desired venue by its name. For example:",
            "Code": "const venue = venues.find(venue => venue.name === 'YOUR_VENUE_NAME_HERE');"
        },
        {
            "Step": "Convert the GeoJSON point geometry to a LatLng object. For example:",
            "Code": "const anchor = { lat: venue.anchor.coordinates[1], lng: venue.anchor.coordinates[0] };"
        },
        {
            "Step": "Initialize the MapboxView with the 'center' property set to the 'anchor'.",
            "Code": "const mapView = new mapsindoors.mapView.MapboxView({\n    accessToken: mapboxAccessToken,\n    element: document.getElementById('map'),\n    center: anchor, // Assign the anchor as the center.\n    zoom: 15,\n    maxZoom: 21\n});"
        },
        {
            "Step": "Initialize the MapsIndoors SDK. For example:",
            "Code": "const mapsIndoorsInstance = new mapsindoors.MapsIndoors({\n    mapView: mapView,\n    venue: venue,\n    labelOptions: {\n        pixelOffset: { width: 0, height: 14 }\n    }\n});"
        }
    ]
},
{
    "Question": "How do I display locations as a list in MapsIndoors?",
    "Answer": "You can display locations as a list in MapsIndoors by following these steps:",
    "Context": [
        {
            "Step": "Search for locations using the 'mapsindoors.services.LocationsService.getLocations' function, which returns a promise when the query has executed."
        },
        {
            "Step": "Attach an event listener to an input element (e.g., 'searchElement') to listen for user input."
        },
        {
            "Step": "Use a debounce function to prevent rapid successive calls to the service. This function introduces a delay of 500ms before executing the query, unless debounce is called again within 500ms, resetting the timer.",
            "Code": "searchElement.addEventListener('input', debounce((e) => {\n    const value = e.target.value;\n    if (value > '') {\n        mapsindoors.services.LocationsService.getLocations({ q: value, includeOutsidePOI: true })\n            .then(displayResults)\n            .then(filterMap);\n    } else {\n        clearResults();\n        clearFilter();\n    }\n}, 500));"
        }
    ]
},
{
    "Question": "What's the difference between setDisplayRule and filter methods on the MapsIndoors class?",
    "Answer": "The difference between the 'setDisplayRule' and 'filter' methods on the MapsIndoors class is as follows:",
    "Context": [
        {
            "Explanation": "You use the 'setDisplayRule' method to define a display rule for specific location objects. It allows you to customize the appearance of individual locations by specifying visual properties like colors, icons, or visibility."
        },
        {
            "Explanation": "On the other hand, the 'filter' method is used to control the visibility of location objects on the map. It allows you to hide all location objects except the ones specified in the filter. If 'null' is passed as the filter, it clears the filter and shows all location objects."
        },
        {
            "Important Note": "It's essential to distinguish between these two methods as they serve entirely different functionality. 'setDisplayRule' is for customizing the visual appearance of individual locations, while 'filter' is for controlling which location objects are displayed on the map."
        }
    ]
},
[
    {
        "Question": "How do I center a map?",
        "Answer": "To center a map using MapsIndoors, you can follow these steps:",
        "Context": [
            {
                "Step": "Obtain the map object using 'mapsIndoorsInstance.getMap()'.",
                "Step": "You can center the map on the coordinates of any clicked circle from the 'circle' layer. For example:",
                "Code": "map.on('click', 'circle', (e) => {\nmap.flyTo({\ncenter: e.features[0].geometry.coordinates\n});\n});",
                "Step": "Alternatively, you can use 'setCenter' instead of 'flyTo'.",
                "Step": "If you are using the coordinates of a location, you can use:",
                "Code": "location.properties.anchor.coordinates[1], location.properties.anchor.coordinates[0]"
            }
        ]
    }
]









]
